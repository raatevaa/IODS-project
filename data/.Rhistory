# About the project
#Course:
*Introduction to Open Data Science 2018*
##Short description:
*Aim of this course is to demonstrate main principles of data handling, statistical methods, and data visualization. In the end of this course, students will be able to apply the principle of reproducible research. In addition, after this course, you will see the **light** of programming and possibilities of data science! Have fun!*
*GitHub repository:*
[Link to my repository](https://raatevaa.github.io/IODS-project/)
*Write a short description about the course and add a link to your github repository here. This is an R markdown (.Rmd) file so you can use R markdown syntax. See the 'Useful links' page in the mooc area (chapter 1) for instructions.*
# About the project
#Course:
*Introduction to Open Data Science 2018*
##Short description:
*Aim of this course is to demonstrate main principles of data handling, statistical methods, and data visualization. In the end of this course, students will be able to apply the principle of reproducible research. In addition, after this course, you will see the **light** of programming and possibilities of data science! Have fun!*
*GitHub repository:*
*[Link to my repository](https://raatevaa.github.io/IODS-project/)*
*Write a short description about the course and add a link to your github repository here. This is an R markdown (.Rmd) file so you can use R markdown syntax. See the 'Useful links' page in the mooc area (chapter 1) for instructions.*
# About the project
#Course:
*Introduction to Open Data Science 2018*
##Short description:
*Aim of this course is to demonstrate main principles of data handling, statistical methods, and data visualization. In the end of this course, students will be able to apply the principle of reproducible research. In addition, after this course, you will see the light of programming and possibilities of data science! Have fun!*
*GitHub repository:*
*[Link to my repository](https://raatevaa.github.io/IODS-project/)*
*Write a short description about the course and add a link to your github repository here. This is an R markdown (.Rmd) file so you can use R markdown syntax. See the 'Useful links' page in the mooc area (chapter 1) for instructions.*
# About the project
#Course:
*Introduction to Open Data Science 2018*
##Short description:
*Aim of this course is to demonstrate main principles of data handling, statistical methods, and data visualization. In the end of this course, students will be able to apply the principle of reproducible research. In addition, after this course, you will see the light of programming and possibilities of data science! Have fun!*
*GitHub repository:*
*[Link to my repository](https://raatevaa.github.io/IODS-project/)*
*Write a short description about the course and add a link to your github repository here. This is an R markdown (.Rmd) file so you can use R markdown syntax. See the 'Useful links' page in the mooc area (chapter 1) for instructions.*
#Author: Antti Raatevaara
#Date 13.11.2018
#code description:
#This is the data wrangling part of IODS, chapter 3. Original data can be found from: UCI Machine Learning Repository,
#Student Performance Data (incl. Alcohol consumption) page.
#Data consists two .csv files (student-mat.csv) and (student-por.csv).
# Read the csv's
df_mat <- read.csv(file="student-mat.csv", header=TRUE, sep=",")
df_por <- read.csv(file="student-por.csv", header=TRUE, sep=",")
# Read the csv's
df_mat <- read.csv(file="student-mat.csv", header=TRUE, sep=",")
df_por <- read.csv(file="student-por.csv", header=TRUE, sep=",")
setwd("C:/Users/L1636/Documents/IODS/IODS-project/data")
# Read the csv's
df_mat <- read.csv(file="student-mat.csv", header=TRUE, sep=",")
df_por <- read.csv(file="student-por.csv", header=TRUE, sep=",")
View(df_mat)
setwd("C:/Users/L1636/Documents/IODS/IODS-project/data")
# Read the csv's
df_mat <- read.csv(file="student-mat.csv", header=TRUE, sep=";")
df_por <- read.csv(file="student-por.csv", header=TRUE, sep=";")
View(df_mat)
str(df_mat)
dim(df_mat)
str(df_stud)
dim(df_stud)
str(df_mat)
dim(df_mat)
str(df_por)
dim(df_por)
View(df_mat)
View(df_por)
identfiers = c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
joined_data <- merge(df_por,df_mat,by=identfiers)
View(joined_data)
dim(joined_data)
duplicated(joined_data)
dups = duplicated(joined_data)
str(dups)
summary(dups)
df_without_dupes <- joined_data[!duplicated(joined_data),]
dups = duplicated(df_mat)
summary(dups)
dups = duplicated(df_por)
summary(dups)
# From datacamp:
# create a new data frame with only the joined columns
alc <- select(joined_data, one_of(identfiers))
install.packages("dplyr")
setwd("C:/Users/L1636/Documents/IODS/IODS-project/data")
# Read the csv's
df_mat <- read.csv(file="student-mat.csv", header=TRUE, sep=";")
df_por <- read.csv(file="student-por.csv", header=TRUE, sep=";")
str(df_mat)
#df_mat and por contains both categorical (school, sex) and discrete variables (studytime, age). Variables are same for both datas.
dim(df_mat)
#in df_mat data there is 33 columns (variables) and 365 rows (observations)
dim(df_por)
#in df_mat data there is 33 columns (variables) and 649 rows (observations)
identfiers = c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
joined_data <- inner_join(df_mat, df_por, by = identifiers)
#Code description:
#This is the data wrangling part of IODS, chapter 3. Original data can be found from: UCI Machine Learning Repository,
#Student Performance Data (incl. Alcohol consumption) page.
#Data consists two .csv files (student-mat.csv) and (student-por.csv).
library(dplyr)
joined_data <- inner_join(df_mat, df_por, by = identifiers)
#Identifiers
identfiers = c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
joined_data <- inner_join(df_mat, df_por, by = identifiers)
joined_data <- inner_join(df_mat, df_por, by = identfiers)
# From datacamp:
# create a new data frame with only the joined columns
alc <- select(joined_data, one_of(identfiers))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(df_mat)[!colnames(df_mat) %in% join_by]
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(df_mat)[!colnames(df_mat) %in% identfiers]
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(df_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(joined_data, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
glimpse()
glimpse(alc)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
View(alc)
# initialize a plot of alcohol use
g1 <- ggplot(data = alc, aes(x = alc_use))
# define the plot as a bar plot and draw it
g1 + geom_bar()
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
View(alc)
glimpse(alc)
write.csv(alc, file = "alc_use.csv",row.names=FALSE)
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt"
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt"
alc_data <- read.delim(url, sep=",")
alc_data.colnames()
colnames(alc_data)
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt"
alc_data <- read.delim(url, sep=",")
colnames(alc_data)
summary(alc_data)
alc_data <- read.delim(url, sep=",")
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")
install.packages("tidyr")
library(tidyr); library(dplyr); library(ggplot2)
gather(alc_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")
gather(alc_data) %>% glimpse
g2 <- ggplot(data = alc_data)
View(g2)
g2 <- ggplot(data = alc_data)
g2 <- ggplot(data = alc_data)
g2 + geom_bar()
gather(alc_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")+ geom_bar()
gather(alc_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")+ geom_bar(stat="key")
gather(alc_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")+ geom_bar(stat="key")
gather(alc_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free")+ geom_bar()
