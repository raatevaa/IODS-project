2.2
2,2
setwd("~/")
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
setwd("~/")
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data$Dam<-factor(data$Dam)
summary(data)
test.rows <- sample(1:nrow(data), 5986);  #puolet datasta, eli kuinka monta ruutua /2
test.set <- data[test.rows, ];
train.set <- data[-test.rows, ];
summary(train.set)
cor(data$ASL,data$CHMmean)
ALS_model<- glm(formula = Dam ~ ASL+VCC+Aspect+CHMmax,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(demo_model)
summary(ASL_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+Aspect+CHMmax,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ASL_model)
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+Aspect+CHMmean,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+CHMmean,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+CHMsd,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
#mallin automaattinen parantaminen, MUTTA vältä korreloituvia muuttujia, esim CHMmean ja CHMmax korreloivat
demo_model1<-step(demo_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
ASL_model<-step(demo_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
ASL_model<-step(ASL_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ASL_model)
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+CHMmean,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
#mallin automaattinen parantaminen, MUTTA vältä korreloituvia muuttujia, esim CHMmean ja CHMmax korreloivat
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+VCC+CHMmean+DIST+Slope,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMmean+VCC+DIST,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
#mallin automaattinen parantaminen, MUTTA vältä korreloituvia muuttujia, esim CHMmean ja CHMmax korreloivat
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
write.table(test.set, file = "testset.csv", dec=".", sep=";")
write.table(train.set, file = "trainset.csv", dec=".", sep=";")
test.set$pred <-predict(ALS_model,newdata=test.set,type="response")
summary(test.set)
write.table(test.set, file = "testset.csv", dec=".", sep=";")
library(irr)
install.packages("irr")
library(irr)
help(irr)
??irr
kappa2
kappa2(ALS_model, weight = c("squared"), sort.levels = FALSE)
kappa2(test.set, weight = c("squared"), sort.levels = FALSE)
kappam.fleiss(test.set, weight = c("unweighted"), sort.levels = FALSE)
kappa2(test.set[,1:2], "unweighted")
kappa2
i=kappa2(test.set[,1:4], "equal")
i=kappa2(test.set[,4:2], "equal")
i=kappa2(test.set[,1:1], "equal")
1
i=kappa2(test.set[,1:2], "equal")
i=kappa2(test.set, "equal")
kappam.fleiss(test.set)
data <- read.csv(file="predictors_SWFI.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_SWFI.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data$Dam<-factor(data$Dam)
data$ST<-factor(data$ST)
data$Soil<-factor(data$Soil)
data$SP<-factor(data$SP)
data$Sdc<-factor(data$Sdc)
data$Ss<-factor(data$Ss)
data$Tsc<-factor(data$Tsc)
summary(data)
sapply(data,function(x) sum(is.na(x)))
data <- read.csv(file="predictors_SWFI_Lidar.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data$Dam<-factor(data$Dam)
data$ST<-factor(data$ST)
data$Soil<-factor(data$Soil)
data$SP<-factor(data$SP)
data$Sdc<-factor(data$Sdc)
data$Ss<-factor(data$Ss)
data$Tsc<-factor(data$Tsc)
summary(data)
data <- read.csv(file="predictors_SWFI_Lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data <- read.csv(file="predictors_SWFI_Lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data$Dam<-factor(data$Dam)
data$ST<-factor(data$ST)
data$Soil<-factor(data$Soil)
data$SP<-factor(data$SP)
data$Sdc<-factor(data$Sdc)
data$Ss<-factor(data$Ss)
data$Tsc<-factor(data$Tsc)
summary(data)
test.rows <- sample(1:nrow(data), 5853);  #puolet datasta, eli kuinka monta ruutua /2
test.set <- data[test.rows, ];
train.set <- data[-test.rows, ];
write.table(test.set, file = "testset.csv", dec=".", sep=";")
write.table(train.set, file = "trainset.csv", dec=".", sep=";")
summary(train.set)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMmean+VCC+DIST,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMmax+VCC+DIST,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
cor(data$ASL,data$CHMmean)
cor(data$ASL,data$CHMmax)
cor(data$CHMmean,data$CHMmax)
cor(data$ASL,data$CHMsd)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC+DIST,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
#mallin automaattinen parantaminen, MUTTA vältä korreloituvia muuttujia, esim CHMmean ja CHMmax korreloivat
ALS_model<-step(ALS_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(ALS_model)
SWFI_model<- glm(formula = Dam ~ST+Soil+SP+Hg+Dg+BA+Age+Vol+Sdc+Ss+Tsc+HgDg+AgeDg+AgeHg ,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(SWFI_model)
SWFI_model<-step(SWFI_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(SWFI_model)
SWFI_model<- glm(formula = Dam ~ST+SP+BA+Age+Vol+Sdc+Ss+HgDg+AgeDg ,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(SWFI_model)
SWFI_model<-step(SWFI_model,trace=0, k=2) #mallien parametrit talteen, joita käytetään myöhemmin riskikartan tekemisessä ARCGIS.
summary(SWFI_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC+DIST,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
setwd("~/")
data <- read.csv(file="predictors_SWFI_Lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
data$Dam<-factor(data$Dam)
#SWFI
data$ST<-factor(data$ST)
data$Soil<-factor(data$Soil)
data$SP<-factor(data$SP)
data$Sdc<-factor(data$Sdc)
data$Ss<-factor(data$Ss)
data$Tsc<-factor(data$Tsc)
summary(data)
test.rows <- sample(1:nrow(data), 5853);  #puolet datasta, eli kuinka monta ruutua /2
test.set <- data[test.rows, ];
train.set <- data[-test.rows, ];
write.table(test.set, file = "testset.csv", dec=".", sep=";")
write.table(train.set, file = "trainset.csv", dec=".", sep=";")
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
SWFI_model<- glm(formula = Dam ~ST+SP+BA+Age+Vol+Sdc+Ss+HgDg+AgeDg ,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(SWFI_model)
coefficients(SWFI_model)
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
summary(data)
setwd("~/")
data <- read.csv(file="predictors_SWFI_Lidar_2.csv", head=TRUE,na.strings = c(""), sep=";")
summary(data)
sapply(data,function(x) sum(is.na(x)))
#Luokkamuuttujat
data$Dam<-factor(data$Dam)
#SWFI
data$ST<-factor(data$ST)
data$Soil<-factor(data$Soil)
data$SP<-factor(data$SP)
data$Sdc<-factor(data$Sdc)
data$Ss<-factor(data$Ss)
data$Tsc<-factor(data$Tsc)
summary(data)
test.rows <- sample(1:nrow(data), 5853);  #puolet datasta, eli kuinka monta ruutua /2
test.set <- data[test.rows, ];
train.set <- data[-test.rows, ];
write.table(test.set, file = "testset.csv", dec=".", sep=";")
write.table(train.set, file = "trainset.csv", dec=".", sep=";")
test.rows <- sample(1:nrow(data), 5853);  #puolet datasta, eli kuinka monta ruutua /2
test.set <- data[test.rows, ];
train.set <- data[-test.rows, ];
write.table(test.set, file = "testset.csv", dec=".", sep=";")
write.table(train.set, file = "trainset.csv", dec=".", sep=";")
summary(train.set)
#korrelaatio?
cor(data$ASL,data$CHMsd)
#Lidar_malli: ASL,Slope,CHMsd+VCC
ALS_model<- glm(formula = Dam ~ ASL+Slope+CHMsd+VCC,data=train.set, family=binomial(link="logit"),na.action=na.pass)
summary(ALS_model)
test.set$pred <-predict(ALS_model,newdata=test.set,type="response")
summary(test.set)
i=kappam.fleiss(test.set$pred,test.set$Dam)
library(irr)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
getOption("repos")
getOption("repos")
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages("devtools")
devtools::install_url("http://cran.r-project.org/src/contrib/rmarkdown0.5.1.tar.gz")
install.packages("rmarkdown", contriburl = "http://cran.r-project.org/src/contrib", type = "source")
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
devtools::install_github("rstudio/rmarkdown")
getOption("repos")
options(repos = c(CRAN = ""https://cran.rstudio.com/" "))
options(repos = c(CRAN = "https://cran.rstudio.com/"))
options(pkgType = "source")
install.packages("rmarkdown")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
install.packages("rmarkdown", repos = "https://mran.revolutionanalytics.com/snapshot/2016-01-02")
options(repos = "https://mran.revolutionanalytics.com/snapshot/2016-01-02")
update.packages()
getOption(“repos”)
getOption(“repos”)
install.packages("rmarkdown")
rmarkdown
update.packages()
devtools::install_github("rmarkdown")
rmarkdown::render()
devtools::install_version("rmarkdown", version = "1.8", repos = "http://cran.us.r-project.org")
install.packages("rmarkdown")
rmarkdown::render()
install.packages("knitr")
getOption(“repos”)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
utils::sessionInfo()
rl = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt"
<br>
data_stud <- read.delim(url, sep=",")
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt"
<br>
data_stud <- read.delim(url, sep=",")
knitr::opts_chunk$set(error = TRUE)
```{r}
summary(data_stud)
View(data_stud)
setwd("/Users/Omistaja/Documents/GitHub/IODS-project/data")
write.csv(newdata, file = "data_students.csv",row.names=FALSE)
write.csv(data_stud, file = "data_students.csv",row.names=FALSE)
summary(data_stud)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(error = TRUE)
---
title: "Chapter 2"
output: html_document
---
# Data analysis exercise
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt"
<br>
data_stud <- read.delim(url, sep=",")
setwd("/Users/Omistaja/Documents/GitHub/IODS-project/data")
write.csv(data_stud, file = "data_students.csv",row.names=FALSE)
## Data description
Data aims to model the relationship between learning approaches and students achievements in an introductory statistics course in Finland. There are total of 7 variables which explain the students achievements (points). Variables are "gender", "Age", "Attitude","Deep","Stra" and "Surf".
### Data dimensions
Data has 166 observations (students) and 7 variables. Hence, data is a table with 166 rows and 7 columns.
>Variables:
- Age;      Age (in years) derived from the date of birth
- Attitude; Global attitude toward statistics
- Points;   Exam points
- gender;   Gender: M (Male), F (Female)
- Deep;     Deep approach             ~d_sm+d_ri+d_ue where,
d_sm = Seeking Meaning
d_ri = Relating Ideas
d_ue = Use of Evidence
- Surf;     Surface approach          ~su_lp+su_um+su_sb where,
su_lp = Lack of Purpose
su_um = Unrelated Memorising
su_sb = Syllabus-boundness
- Stra;     Strategic approach        ~st_os+st_tm where,
st_os = Organized Studying
st_tm = Time Management
### Variable statistics
*Describe the work you have done this week and summarize your learning.*
- Describe your work and results clearly.
- Assume the reader has an introductory course level understanding of writing and reading R code as well as statistical methods
- Assume the reader has no previous knowledge of your data or the more advanced methods you are using
url = "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt"
<br>
data_stud <- read.delim(url, sep=",")
summary(data_stud)
save(data_stud, file="data_stud.RData")
